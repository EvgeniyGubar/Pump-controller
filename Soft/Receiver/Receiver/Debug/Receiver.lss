
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800078  00800078  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154f  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9f  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bed  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00003358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000967  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000046c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	0f c2       	rjmp	.+1054   	; 0x428 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	e3 c0       	rjmp	.+454    	; 0x1de <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e7       	ldi	r26, 0x78	; 120
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	a1 d0       	rcall	.+322    	; 0x19c <main>
  5a:	40 c2       	rjmp	.+1152   	; 0x4dc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <HC595_init>:
						0b00001101	}; //N							
							
void HC595_init(void)
{
	// Установка выводов SPI на вывод
	HC595_DDR|=(1<<STSP); //(1<<MOSI)|(1<<SCK); - иниц. в SPI2313.c
  5e:	89 9a       	sbi	0x11, 1	; 17
  60:	08 95       	ret

00000062 <HC595_send_data>:
}

void HC595_send_data(uint8_t data)
{
	SPI_MasterTransmit(simbol[data]);
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	71 d0       	rcall	.+226    	; 0x152 <SPI_MasterTransmit>
	STSP_high;
  70:	91 9a       	sbi	0x12, 1	; 18
	STSP_low;	
  72:	91 98       	cbi	0x12, 1	; 18
  74:	08 95       	ret

00000076 <GetButtonPress>:
	volatile static uint16_t push_count=0;       //счетчик удержания кнопок, флаг удержания
	static uint8_t push_flag = 0;
 	static uint8_t button_count = 0;
	static uint8_t button_state = 0; 
	
 	if(GetTick() != time)
  76:	c8 d1       	rcall	.+912    	; 0x408 <GetTick>
  78:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <time.1635>
  7c:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <time.1635+0x1>
  80:	82 17       	cp	r24, r18
  82:	93 07       	cpc	r25, r19
  84:	09 f4       	brne	.+2      	; 0x88 <__DATA_REGION_LENGTH__+0x8>
  86:	58 c0       	rjmp	.+176    	; 0x138 <__stack+0x59>
 	{
 		if(BUTTON_PRESS != 0x03 )
  88:	96 b3       	in	r25, 0x16	; 22
  8a:	93 70       	andi	r25, 0x03	; 3
  8c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <button_count.1638>
  90:	93 30       	cpi	r25, 0x03	; 3
  92:	81 f1       	breq	.+96     	; 0xf4 <__stack+0x15>
 		{
 			if (button_count < 5) button_count++;	//счетчик дребезгов при нажатии в мс
  94:	85 30       	cpi	r24, 0x05	; 5
  96:	18 f4       	brcc	.+6      	; 0x9e <__DATA_REGION_LENGTH__+0x1e>
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <button_count.1638>
 			if (button_count == 5)
  9e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <button_count.1638>
  a2:	85 30       	cpi	r24, 0x05	; 5
  a4:	09 f0       	breq	.+2      	; 0xa8 <__DATA_REGION_LENGTH__+0x28>
  a6:	43 c0       	rjmp	.+134    	; 0x12e <__stack+0x4f>
 			{
				button_state = BUTTON_PRESS;		//зафиксировали сосотояние кнопок
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	83 70       	andi	r24, 0x03	; 3
  ac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <button_state.1639>
  				if (push_count < 200) push_count++;
  b0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <push_count.1636>
  b4:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <push_count.1636+0x1>
  b8:	28 3c       	cpi	r18, 0xC8	; 200
  ba:	31 05       	cpc	r19, r1
  bc:	50 f4       	brcc	.+20     	; 0xd2 <__DATA_REGION_LENGTH__+0x52>
  be:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <push_count.1636>
  c2:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <push_count.1636+0x1>
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <push_count.1636+0x1>
  ce:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <push_count.1636>
 				if (push_count == 199)		//срабатывание при удержанием
  d2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <push_count.1636>
  d6:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <push_count.1636+0x1>
  da:	27 3c       	cpi	r18, 0xC7	; 199
  dc:	31 05       	cpc	r19, r1
  de:	39 f5       	brne	.+78     	; 0x12e <__stack+0x4f>
 				{
 					push_flag = 1;
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <__data_end>
 					switch(button_state)
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	19 f0       	breq	.+6      	; 0xf0 <__stack+0x11>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	39 f1       	breq	.+78     	; 0x13c <__stack+0x5d>
  ee:	1f c0       	rjmp	.+62     	; 0x12e <__stack+0x4f>
 					{
	 					case 0x02: return POWER_BUTTON_PUSH; break;
	 					case 0x01: return TIMER_BUTTON_PUSH; break;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
 				}
			}
 		}
 		else
 		{
 			if (button_count > 0)	//счетчик дребезгов при отжатии
  f4:	88 23       	and	r24, r24
  f6:	d9 f0       	breq	.+54     	; 0x12e <__stack+0x4f>
			{
				 button_count--; 
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <button_count.1638>
				 push_count = 0;
  fe:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <push_count.1636+0x1>
 102:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <push_count.1636>
				 if (button_count == 0)	//короткое срабатывание при спадающем фронте
 106:	81 11       	cpse	r24, r1
 108:	12 c0       	rjmp	.+36     	; 0x12e <__stack+0x4f>
				 {
					 if (push_flag == 1)	push_flag = 0;		//если было срабатывание при удержании кнопки, то выходим из функции
 10a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	19 f4       	brne	.+6      	; 0x118 <__stack+0x39>
 112:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 116:	0b c0       	rjmp	.+22     	; 0x12e <__stack+0x4f>
					 else	//иначе - обработать короткое нажатие
					 {
						 switch(button_state)	//если состояние зафиксировалось при нажатии, то кнопка сработает при отжатии
 118:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <button_state.1639>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	29 f0       	breq	.+10     	; 0x12a <__stack+0x4b>
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	71 f0       	breq	.+28     	; 0x140 <__stack+0x61>
						 {
							 case 0x02: return POWER_BUTTON; break;
							 case 0x01: return TIMER_BUTTON; break;
							 default: break;
						 }
						 button_state = 0;
 124:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <button_state.1639>
 128:	02 c0       	rjmp	.+4      	; 0x12e <__stack+0x4f>
					 else	//иначе - обработать короткое нажатие
					 {
						 switch(button_state)	//если состояние зафиксировалось при нажатии, то кнопка сработает при отжатии
						 {
							 case 0x02: return POWER_BUTTON; break;
							 case 0x01: return TIMER_BUTTON; break;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	08 95       	ret
						 button_state = 0;
					 }
				 }
			}
		}
		time = GetTick();
 12e:	6c d1       	rcall	.+728    	; 0x408 <GetTick>
 130:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <time.1635+0x1>
 134:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <time.1635>
 	}	
	return BUTTON_NONE;
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	08 95       	ret
 				if (push_count == 199)		//срабатывание при удержанием
 				{
 					push_flag = 1;
 					switch(button_state)
 					{
	 					case 0x02: return POWER_BUTTON_PUSH; break;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
					 if (push_flag == 1)	push_flag = 0;		//если было срабатывание при удержании кнопки, то выходим из функции
					 else	//иначе - обработать короткое нажатие
					 {
						 switch(button_state)	//если состояние зафиксировалось при нажатии, то кнопка сработает при отжатии
						 {
							 case 0x02: return POWER_BUTTON; break;
 140:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
		time = GetTick();
 	}	
	return BUTTON_NONE;
 142:	08 95       	ret

00000144 <run_command.part.0>:
	switch (data)
	{
		case START:	{
				//beep;
				//display(ON);
				RELAY_ON;
 144:	90 9a       	sbi	0x12, 0	; 18
				RED_ON;
 146:	96 98       	cbi	0x12, 6	; 18
 148:	08 95       	ret

0000014a <SPI_MasterInit>:

// Функция инициализации мастера шины SPI
void SPI_MasterInit(void)
{
// Установка выводов SPI на вывод	 
SPI_DDR|=(1<<MOSI)|(1<<SCK);
 14a:	87 b3       	in	r24, 0x17	; 23
 14c:	80 6c       	ori	r24, 0xC0	; 192
 14e:	87 bb       	out	0x17, r24	; 23
 150:	08 95       	ret

00000152 <SPI_MasterTransmit>:

/* Функция передачи байта данных outData. Ожидает окончания
передачи и возвращает принятый по ножке MISO байт */
unsigned char SPI_MasterTransmit(char outData)
{
	USIDR = outData;// Начало передачи
 152:	8f b9       	out	0x0f, r24	; 15
	USISR|=(1<<USIOIF);  //опускаем флаг переполнения счетчика
 154:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR & (1<<USIOIF)))  //проверяем на переполнение
 156:	76 99       	sbic	0x0e, 6	; 14
 158:	04 c0       	rjmp	.+8      	; 0x162 <SPI_MasterTransmit+0x10>
		{
			USICR|=(1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
 15a:	8d b1       	in	r24, 0x0d	; 13
 15c:	8b 61       	ori	r24, 0x1B	; 27
 15e:	8d b9       	out	0x0d, r24	; 13
 160:	fa cf       	rjmp	.-12     	; 0x156 <SPI_MasterTransmit+0x4>
		}; //тактирование и установка параметров передачи
	return USIDR; //возвращаем принятый байт
 162:	8f b1       	in	r24, 0x0f	; 15
}
 164:	08 95       	ret

00000166 <run_command>:
	}
}

void run_command(enum Command data)
{
	switch (data)
 166:	8b 32       	cpi	r24, 0x2B	; 43
 168:	29 f0       	breq	.+10     	; 0x174 <run_command+0xe>
 16a:	8c 33       	cpi	r24, 0x3C	; 60
 16c:	31 f0       	breq	.+12     	; 0x17a <run_command+0x14>
 16e:	8a 31       	cpi	r24, 0x1A	; 26
 170:	29 f4       	brne	.+10     	; 0x17c <run_command+0x16>
 172:	e8 cf       	rjmp	.-48     	; 0x144 <run_command.part.0>
				RELAY_ON;
				RED_ON;
			}break;
		case STOP:	{
				//beep;
				RELAY_OFF;
 174:	90 98       	cbi	0x12, 0	; 18
				RED_OFF;
 176:	96 9a       	sbi	0x12, 6	; 18
			}break;
 178:	08 95       	ret
		case PLUS_FIVE:	{
				RED_ON; 
 17a:	96 98       	cbi	0x12, 6	; 18
 17c:	08 95       	ret

0000017e <button_processing>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void button_processing()
{
	enum ButtonValues state = GetButtonPress();
 17e:	7b df       	rcall	.-266    	; 0x76 <GetButtonPress>
	if (state != BUTTON_NONE)
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	59 f0       	breq	.+22     	; 0x19a <button_processing+0x1c>
	{
		switch(state)
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	19 f0       	breq	.+6      	; 0x18e <button_processing+0x10>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f0       	breq	.+10     	; 0x196 <button_processing+0x18>
 18c:	08 95       	ret
		{
			case POWER_BUTTON:	{
					if(RELAY_CHECK == 0) run_command(START);
 18e:	80 9b       	sbis	0x10, 0	; 16
 190:	d9 cf       	rjmp	.-78     	; 0x144 <run_command.part.0>
					else run_command(STOP); //если выключено
 192:	8b e2       	ldi	r24, 0x2B	; 43
 194:	01 c0       	rjmp	.+2      	; 0x198 <button_processing+0x1a>
				}; break;
				
			//case POWER_BUTTON_PUSH:{}; break;
			case TIMER_BUTTON:	{
					run_command(PLUS_FIVE);
 196:	8c e3       	ldi	r24, 0x3C	; 60
 198:	e6 cf       	rjmp	.-52     	; 0x166 <run_command>
 19a:	08 95       	ret

0000019c <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/	
int main(void)
{  
	CLKPR=(1<<CLKPCE);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	86 bd       	out	0x26, r24	; 38
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
 1a0:	16 bc       	out	0x26, r1	; 38
		4 - IRQ					4 - анод 2 индикатора
		5 - MISO				5 - анод 1 индикатора
		6 - MOSI				6 - светодиод красный
		7 - SCK
	*/	
	DDRD|=(1<<0)|(1<<2)|(1<<3)|(1<<4)|(1<<5)|(1<<6);	//пины на выход
 1a2:	81 b3       	in	r24, 0x11	; 17
 1a4:	8d 67       	ori	r24, 0x7D	; 125
 1a6:	81 bb       	out	0x11, r24	; 17
	PORTB|=(1<<0)|(1<<1);								//пины на вход (подтяжки для кнопок)
 1a8:	88 b3       	in	r24, 0x18	; 24
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	88 bb       	out	0x18, r24	; 24
	RED_OFF;											//управление катодом
 1ae:	96 9a       	sbi	0x12, 6	; 18
//  	OCR0A = 110;			//примерно 210 Гц, по 70 Гц на индикатор, на частоте кварца 6 Мгц
//  	TCCR0A|=(1<<WGM01);		//режим СТС, счет вверх до OCR0A
//  	TCCR0B|=(1<<CS02);		//делитель 256. запускаем таймер
//  	TIMSK|=(1<<OCIE0A);		//включаем прерывание
	
	ACSR |= (1<<ACD);		//выключили АЦП
 1b0:	47 9a       	sbi	0x08, 7	; 8

	GIMSK|=(1<<PCIE0);		//включаем внешнее прерывание для nrf24
 1b2:	8b b7       	in	r24, 0x3b	; 59
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	8b bf       	out	0x3b, r24	; 59
	PCMSK0|=(1<<PCINT4);	//разрешаем прерывание от модуля
 1b8:	80 b5       	in	r24, 0x20	; 32
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	80 bd       	out	0x20, r24	; 32
	
	SysTick_init();	
 1be:	80 d1       	rcall	.+768    	; 0x4c0 <SysTick_init>
	SPI_MasterInit();	
 1c0:	c4 df       	rcall	.-120    	; 0x14a <SPI_MasterInit>
	HC595_init();
 1c2:	4d df       	rcall	.-358    	; 0x5e <HC595_init>
 	nrf24_init_config(2,1);			//МОДУЛЬ ПЕРЕХОДИТ В РЕЖИМ ПРИЕМНИКА. КАНАЛ 2. НАГРУЗКА 1 БАЙТ
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	98 d0       	rcall	.+304    	; 0x2fa <nrf24_init_config>
 	nrf24_tx_address(tx_address);	//Загрузка адресов устройст 
 1ca:	82 e7       	ldi	r24, 0x72	; 114
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0f d1       	rcall	.+542    	; 0x3ee <nrf24_tx_address>
 	nrf24_rx_address(rx_address);
 1d0:	8d e6       	ldi	r24, 0x6D	; 109
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	05 d1       	rcall	.+522    	; 0x3e0 <nrf24_rx_address>

    sei();
 1d6:	78 94       	sei
	
	uint16_t delay = GetTick();
 1d8:	17 d1       	rcall	.+558    	; 0x408 <GetTick>
// 		{
// 			delay = GetTick();
// 			PORTD ^= (1<<6);
// 		}
// 		
		button_processing();
 1da:	d1 df       	rcall	.-94     	; 0x17e <button_processing>
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <main+0x3e>

000001de <__vector_11>:
		default: break;
	}
}

ISR(PCINT0_vect)	//обработка прерывания от модуля
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	if(nrf24_dataReady())			//проверка флага приема
 200:	d1 d0       	rcall	.+418    	; 0x3a4 <nrf24_dataReady>
 202:	88 23       	and	r24, r24
 204:	31 f0       	breq	.+12     	; 0x212 <__vector_11+0x34>
	{
		nrf24_getData(&received_data);	//считывание данных в буфер
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	57 d0       	rcall	.+174    	; 0x2ba <nrf24_getData>
		run_command(received_data);					//выполнение команды
 20c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <received_data>
 210:	aa df       	rcall	.-172    	; 0x166 <run_command>
	}
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <nrf24_getStatus>:
{
	uint8_t rv;
	nrf24_readRegister(OBSERVE_TX,&rv,1);
	rv = rv & 0x0F;
	return rv;
}
 234:	c3 98       	cbi	0x18, 3	; 24
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	8b df       	rcall	.-234    	; 0x152 <SPI_MasterTransmit>
 23c:	c3 9a       	sbi	0x18, 3	; 24
 23e:	08 95       	ret

00000240 <nrf24_transferSync>:
 240:	ef 92       	push	r14
 242:	ff 92       	push	r15
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
 24e:	8b 01       	movw	r16, r22
 250:	7c 01       	movw	r14, r24
 252:	e4 0e       	add	r14, r20
 254:	f1 1c       	adc	r15, r1
 256:	ce 15       	cp	r28, r14
 258:	df 05       	cpc	r29, r15
 25a:	39 f0       	breq	.+14     	; 0x26a <nrf24_transferSync+0x2a>
 25c:	89 91       	ld	r24, Y+
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	78 df       	rcall	.-272    	; 0x152 <SPI_MasterTransmit>
 262:	f8 01       	movw	r30, r16
 264:	81 93       	st	Z+, r24
 266:	8f 01       	movw	r16, r30
 268:	f6 cf       	rjmp	.-20     	; 0x256 <nrf24_transferSync+0x16>
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <nrf24_transmitSync>:
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
 282:	8c 01       	movw	r16, r24
 284:	06 0f       	add	r16, r22
 286:	11 1d       	adc	r17, r1
 288:	c0 17       	cp	r28, r16
 28a:	d1 07       	cpc	r29, r17
 28c:	21 f0       	breq	.+8      	; 0x296 <nrf24_transmitSync+0x1e>
 28e:	89 91       	ld	r24, Y+
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	5f df       	rcall	.-322    	; 0x152 <SPI_MasterTransmit>
 294:	f9 cf       	rjmp	.-14     	; 0x288 <nrf24_transmitSync+0x10>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <nrf24_write_reg>:
 2a0:	cf 93       	push	r28
 2a2:	c6 2f       	mov	r28, r22
 2a4:	c3 98       	cbi	0x18, 3	; 24
 2a6:	8f 71       	andi	r24, 0x1F	; 31
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	52 df       	rcall	.-348    	; 0x152 <SPI_MasterTransmit>
 2ae:	8c 2f       	mov	r24, r28
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	4f df       	rcall	.-354    	; 0x152 <SPI_MasterTransmit>
 2b4:	c3 9a       	sbi	0x18, 3	; 24
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <nrf24_getData>:
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	ec 01       	movw	r28, r24
 2c0:	c3 98       	cbi	0x18, 3	; 24
 2c2:	81 e6       	ldi	r24, 0x61	; 97
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	45 df       	rcall	.-374    	; 0x152 <SPI_MasterTransmit>
 2c8:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <payload_len>
 2cc:	be 01       	movw	r22, r28
 2ce:	ce 01       	movw	r24, r28
 2d0:	b7 df       	rcall	.-146    	; 0x240 <nrf24_transferSync>
 2d2:	c3 9a       	sbi	0x18, 3	; 24
 2d4:	60 e4       	ldi	r22, 0x40	; 64
 2d6:	87 e0       	ldi	r24, 0x07	; 7
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	e1 cf       	rjmp	.-62     	; 0x2a0 <nrf24_write_reg>

000002de <nrf24_powerUpRx>:
 2de:	c3 98       	cbi	0x18, 3	; 24
 2e0:	82 ee       	ldi	r24, 0xE2	; 226
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	36 df       	rcall	.-404    	; 0x152 <SPI_MasterTransmit>
 2e6:	c3 9a       	sbi	0x18, 3	; 24
 2e8:	60 e7       	ldi	r22, 0x70	; 112
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	d9 df       	rcall	.-78     	; 0x2a0 <nrf24_write_reg>
 2ee:	c2 98       	cbi	0x18, 2	; 24
 2f0:	6b e0       	ldi	r22, 0x0B	; 11
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	d5 df       	rcall	.-86     	; 0x2a0 <nrf24_write_reg>
 2f6:	c2 9a       	sbi	0x18, 2	; 24
 2f8:	08 95       	ret

000002fa <nrf24_init_config>:
 2fa:	cf 93       	push	r28
 2fc:	c6 2f       	mov	r28, r22
 2fe:	bb 9a       	sbi	0x17, 3	; 23
 300:	ba 9a       	sbi	0x17, 2	; 23
 302:	c3 98       	cbi	0x18, 3	; 24
 304:	c2 98       	cbi	0x18, 2	; 24
 306:	68 2f       	mov	r22, r24
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	ca df       	rcall	.-108    	; 0x2a0 <nrf24_write_reg>
 30c:	c0 93 85 00 	sts	0x0085, r28	; 0x800085 <payload_len>
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	81 e1       	ldi	r24, 0x11	; 17
 314:	c5 df       	rcall	.-118    	; 0x2a0 <nrf24_write_reg>
 316:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <payload_len>
 31a:	82 e1       	ldi	r24, 0x12	; 18
 31c:	c1 df       	rcall	.-126    	; 0x2a0 <nrf24_write_reg>
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	83 e1       	ldi	r24, 0x13	; 19
 322:	be df       	rcall	.-132    	; 0x2a0 <nrf24_write_reg>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	84 e1       	ldi	r24, 0x14	; 20
 328:	bb df       	rcall	.-138    	; 0x2a0 <nrf24_write_reg>
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	85 e1       	ldi	r24, 0x15	; 21
 32e:	b8 df       	rcall	.-144    	; 0x2a0 <nrf24_write_reg>
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	86 e1       	ldi	r24, 0x16	; 22
 334:	b5 df       	rcall	.-150    	; 0x2a0 <nrf24_write_reg>
 336:	66 e2       	ldi	r22, 0x26	; 38
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	b2 df       	rcall	.-156    	; 0x2a0 <nrf24_write_reg>
 33c:	68 e0       	ldi	r22, 0x08	; 8
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	af df       	rcall	.-162    	; 0x2a0 <nrf24_write_reg>
 342:	63 e0       	ldi	r22, 0x03	; 3
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	ac df       	rcall	.-168    	; 0x2a0 <nrf24_write_reg>
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	a9 df       	rcall	.-174    	; 0x2a0 <nrf24_write_reg>
 34e:	6f e4       	ldi	r22, 0x4F	; 79
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	a6 df       	rcall	.-180    	; 0x2a0 <nrf24_write_reg>
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	8c e1       	ldi	r24, 0x1C	; 28
 358:	a3 df       	rcall	.-186    	; 0x2a0 <nrf24_write_reg>
 35a:	cf 91       	pop	r28
 35c:	c0 cf       	rjmp	.-128    	; 0x2de <nrf24_powerUpRx>

0000035e <nrf24_readRegister>:
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	eb 01       	movw	r28, r22
 366:	14 2f       	mov	r17, r20
 368:	c3 98       	cbi	0x18, 3	; 24
 36a:	8f 71       	andi	r24, 0x1F	; 31
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	f1 de       	rcall	.-542    	; 0x152 <SPI_MasterTransmit>
 370:	41 2f       	mov	r20, r17
 372:	be 01       	movw	r22, r28
 374:	ce 01       	movw	r24, r28
 376:	64 df       	rcall	.-312    	; 0x240 <nrf24_transferSync>
 378:	c3 9a       	sbi	0x18, 3	; 24
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	08 95       	ret

00000382 <nrf24_rxFifoEmpty>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	1f 92       	push	r1
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	dd 27       	eor	r29, r29
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	be 01       	movw	r22, r28
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	87 e1       	ldi	r24, 0x17	; 23
 396:	e3 df       	rcall	.-58     	; 0x35e <nrf24_readRegister>
 398:	89 81       	ldd	r24, Y+1	; 0x01
 39a:	81 70       	andi	r24, 0x01	; 1
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <nrf24_dataReady>:
 3a4:	47 df       	rcall	.-370    	; 0x234 <nrf24_getStatus>
 3a6:	86 fd       	sbrc	r24, 6
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <nrf24_dataReady+0x12>
 3aa:	eb df       	rcall	.-42     	; 0x382 <nrf24_rxFifoEmpty>
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	88 23       	and	r24, r24
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <nrf24_dataReady+0x14>
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <nrf24_dataReady+0x14>
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	89 2f       	mov	r24, r25
 3ba:	08 95       	ret

000003bc <nrf24_writeRegister>:
/************************************************************/
/*         ЗАПИСЬ НЕСКОЛЬКИХ БАЙТ В ОДИН РЕГИСТР            */
/************************************************************/
/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	eb 01       	movw	r28, r22
 3c4:	14 2f       	mov	r17, r20
	nrf24_csn_low;
 3c6:	c3 98       	cbi	0x18, 3	; 24
	SPI_MasterTransmit(W_REGISTER | (REGISTER_MASK & reg));
 3c8:	8f 71       	andi	r24, 0x1F	; 31
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	c1 de       	rcall	.-638    	; 0x152 <SPI_MasterTransmit>
	nrf24_transmitSync(value,len);
 3d0:	61 2f       	mov	r22, r17
 3d2:	ce 01       	movw	r24, r28
 3d4:	51 df       	rcall	.-350    	; 0x278 <nrf24_transmitSync>
	nrf24_csn_high;
 3d6:	c3 9a       	sbi	0x18, 3	; 24
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	08 95       	ret

000003e0 <nrf24_rx_address>:
/************************************************************/
/*              ЗАПИСЬ АДРЕСА ПРИЕМНИКА                     */
/************************************************************/
void nrf24_rx_address(uint8_t * adr)
{
	nrf24_ce_low;
 3e0:	c2 98       	cbi	0x18, 2	; 24
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 3e2:	45 e0       	ldi	r20, 0x05	; 5
 3e4:	bc 01       	movw	r22, r24
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	e9 df       	rcall	.-46     	; 0x3bc <nrf24_writeRegister>
	nrf24_ce_high;
 3ea:	c2 9a       	sbi	0x18, 2	; 24
 3ec:	08 95       	ret

000003ee <nrf24_tx_address>:

/************************************************************/
/*            ЗАПИСЬ АДРЕСА ПЕРЕДАТЧИКА                     */
/************************************************************/
void nrf24_tx_address(uint8_t* adr)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 3f4:	45 e0       	ldi	r20, 0x05	; 5
 3f6:	bc 01       	movw	r22, r24
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	e0 df       	rcall	.-64     	; 0x3bc <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 3fc:	45 e0       	ldi	r20, 0x05	; 5
 3fe:	be 01       	movw	r22, r28
 400:	80 e1       	ldi	r24, 0x10	; 16
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
/************************************************************/
void nrf24_tx_address(uint8_t* adr)
{
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 406:	da cf       	rjmp	.-76     	; 0x3bc <nrf24_writeRegister>

00000408 <GetTick>:

/************************************************************************/
uint16_t GetTick(void)
{
	static volatile uint16_t MirrorTimeMs;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)	//организация атомарности операции, чтобы ничто не смогло вмешаться в процесс изменения переменной.
 408:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 40a:	f8 94       	cli
	{
		MirrorTimeMs = TimeMs;		
 40c:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <TimeMs>
 410:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <TimeMs+0x1>
 414:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <MirrorTimeMs.1628+0x1>
 418:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <MirrorTimeMs.1628>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 41c:	8f bf       	out	0x3f, r24	; 63
	}
	return MirrorTimeMs;
 41e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <MirrorTimeMs.1628>
 422:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <MirrorTimeMs.1628+0x1>
}
 426:	08 95       	ret

00000428 <__vector_4>:

/************************************************************************/
ISR (TIMER1_COMPA_vect)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
	TimeMs += 5;
 44a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <TimeMs>
 44e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <TimeMs+0x1>
 452:	05 96       	adiw	r24, 0x05	; 5
 454:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <TimeMs+0x1>
 458:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <TimeMs>

 	static uint8_t digit;
 	
 	digit++;
 45c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <digit.1639>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <digit.1639>
 	
 	switch(digit)
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	59 f0       	breq	.+22     	; 0x480 <__vector_4+0x58>
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	81 f0       	breq	.+32     	; 0x48e <__vector_4+0x66>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	b1 f4       	brne	.+44     	; 0x49e <__vector_4+0x76>
 	{
	 	case 1: {
		 	ANOD_RES;
 472:	82 b3       	in	r24, 0x12	; 18
 474:	88 63       	ori	r24, 0x38	; 56
 476:	82 bb       	out	0x12, r24	; 18
		 	HC595_send_data(0);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	f3 dd       	rcall	.-1050   	; 0x62 <HC595_send_data>
		 	ANOD_1;
 47c:	93 98       	cbi	0x12, 3	; 18
	 	}; break;
 47e:	0f c0       	rjmp	.+30     	; 0x49e <__vector_4+0x76>
	 	case 2: {
		 	ANOD_RES;
 480:	82 b3       	in	r24, 0x12	; 18
 482:	88 63       	ori	r24, 0x38	; 56
 484:	82 bb       	out	0x12, r24	; 18
		 	HC595_send_data(1);
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	ec dd       	rcall	.-1064   	; 0x62 <HC595_send_data>
		 	ANOD_2;
 48a:	94 98       	cbi	0x12, 4	; 18
	 	}; break;
 48c:	08 c0       	rjmp	.+16     	; 0x49e <__vector_4+0x76>
	 	case 3: {
		 	ANOD_RES;
 48e:	82 b3       	in	r24, 0x12	; 18
 490:	88 63       	ori	r24, 0x38	; 56
 492:	82 bb       	out	0x12, r24	; 18
		 	HC595_send_data(2);
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	e5 dd       	rcall	.-1078   	; 0x62 <HC595_send_data>
		 	ANOD_3;
 498:	95 98       	cbi	0x12, 5	; 18
		 	digit = 0;
 49a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <digit.1639>
	 	}; break;
 	}
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <SysTick_init>:
/************************************************************************/
void SysTick_init(void)
{
	// настройка таймера на задержку в 5 мс и динамической индикации
	// F = fclock/(N*(1+OCR1A))
	OCR1A = 29999;			//200 Гц - 5мс
 4c0:	8f e2       	ldi	r24, 0x2F	; 47
 4c2:	95 e7       	ldi	r25, 0x75	; 117
 4c4:	9b bd       	out	0x2b, r25	; 43
 4c6:	8a bd       	out	0x2a, r24	; 42
	TCCR1B|=(1<<WGM12);		//режим СТС, счет вверх до OCR1A
 4c8:	8e b5       	in	r24, 0x2e	; 46
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<CS10);		//Без делителя, запускаем таймер
 4ce:	8e b5       	in	r24, 0x2e	; 46
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<OCIE1A);		//включаем прерывание
 4d4:	89 b7       	in	r24, 0x39	; 57
 4d6:	80 64       	ori	r24, 0x40	; 64
 4d8:	89 bf       	out	0x39, r24	; 57
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
