
Transceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000130f  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fb  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a72  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00002ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d41  00000000  00000000  000033cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	11 c2       	rjmp	.+1058   	; 0x43a <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	b8 c1       	rjmp	.+880    	; 0x39a <__vector_20>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e3       	ldi	r30, 0x34	; 52
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3c d2       	rcall	.+1144   	; 0x4d2 <main>
  5a:	6a c2       	rjmp	.+1236   	; 0x530 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SPI_MasterInit>:
{
	uint8_t rv;
	nrf24_readRegister(OBSERVE_TX,&rv,1);
	rv = rv & 0x0F;
	return rv;
}
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	80 6c       	ori	r24, 0xC0	; 192
  62:	87 bb       	out	0x17, r24	; 23
  64:	08 95       	ret

00000066 <SPI_MasterTransmit>:
  66:	8f b9       	out	0x0f, r24	; 15
  68:	8e b1       	in	r24, 0x0e	; 14
  6a:	80 64       	ori	r24, 0x40	; 64
  6c:	8e b9       	out	0x0e, r24	; 14
  6e:	03 c0       	rjmp	.+6      	; 0x76 <SPI_MasterTransmit+0x10>
  70:	8d b1       	in	r24, 0x0d	; 13
  72:	8b 61       	ori	r24, 0x1B	; 27
  74:	8d b9       	out	0x0d, r24	; 13
  76:	76 9b       	sbis	0x0e, 6	; 14
  78:	fb cf       	rjmp	.-10     	; 0x70 <SPI_MasterTransmit+0xa>
  7a:	8f b1       	in	r24, 0x0f	; 15
  7c:	08 95       	ret

0000007e <nrf24_getStatus>:
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	8f 7e       	andi	r24, 0xEF	; 239
  82:	88 bb       	out	0x18, r24	; 24
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	ef df       	rcall	.-34     	; 0x66 <SPI_MasterTransmit>
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	90 61       	ori	r25, 0x10	; 16
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	08 95       	ret

00000090 <nrf24_lastMessageStatus>:
  90:	f6 df       	rcall	.-20     	; 0x7e <nrf24_getStatus>
  92:	85 fd       	sbrc	r24, 5
  94:	04 c0       	rjmp	.+8      	; 0x9e <nrf24_lastMessageStatus+0xe>
  96:	84 ff       	sbrs	r24, 4
  98:	04 c0       	rjmp	.+8      	; 0xa2 <nrf24_lastMessageStatus+0x12>
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	08 95       	ret
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	08 95       	ret
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	08 95       	ret

000000a6 <nrf24_transmitSync>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	d6 2f       	mov	r29, r22
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	06 c0       	rjmp	.+12     	; 0xc2 <nrf24_transmitSync+0x1c>
  b6:	f8 01       	movw	r30, r16
  b8:	ec 0f       	add	r30, r28
  ba:	f1 1d       	adc	r31, r1
  bc:	80 81       	ld	r24, Z
  be:	d3 df       	rcall	.-90     	; 0x66 <SPI_MasterTransmit>
  c0:	cf 5f       	subi	r28, 0xFF	; 255
  c2:	cd 17       	cp	r28, r29
  c4:	c0 f3       	brcs	.-16     	; 0xb6 <nrf24_transmitSync+0x10>
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	08 95       	ret

000000d0 <nrf24_write_reg>:
  d0:	cf 93       	push	r28
  d2:	c6 2f       	mov	r28, r22
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	9f 7e       	andi	r25, 0xEF	; 239
  d8:	98 bb       	out	0x18, r25	; 24
  da:	8f 71       	andi	r24, 0x1F	; 31
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	c3 df       	rcall	.-122    	; 0x66 <SPI_MasterTransmit>
  e0:	8c 2f       	mov	r24, r28
  e2:	c1 df       	rcall	.-126    	; 0x66 <SPI_MasterTransmit>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <nrf24_powerUpRx>:
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	82 ee       	ldi	r24, 0xE2	; 226
  f6:	b7 df       	rcall	.-146    	; 0x66 <SPI_MasterTransmit>
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	60 e7       	ldi	r22, 0x70	; 112
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	e6 df       	rcall	.-52     	; 0xd0 <nrf24_write_reg>
 104:	88 b3       	in	r24, 0x18	; 24
 106:	87 7f       	andi	r24, 0xF7	; 247
 108:	88 bb       	out	0x18, r24	; 24
 10a:	6b e0       	ldi	r22, 0x0B	; 11
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	e0 df       	rcall	.-64     	; 0xd0 <nrf24_write_reg>
 110:	88 b3       	in	r24, 0x18	; 24
 112:	88 60       	ori	r24, 0x08	; 8
 114:	88 bb       	out	0x18, r24	; 24
 116:	08 95       	ret

00000118 <nrf24_init_config>:
 118:	cf 93       	push	r28
 11a:	c6 2f       	mov	r28, r22
 11c:	97 b3       	in	r25, 0x17	; 23
 11e:	90 61       	ori	r25, 0x10	; 16
 120:	97 bb       	out	0x17, r25	; 23
 122:	97 b3       	in	r25, 0x17	; 23
 124:	98 60       	ori	r25, 0x08	; 8
 126:	97 bb       	out	0x17, r25	; 23
 128:	98 b3       	in	r25, 0x18	; 24
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	98 bb       	out	0x18, r25	; 24
 12e:	98 b3       	in	r25, 0x18	; 24
 130:	97 7f       	andi	r25, 0xF7	; 247
 132:	98 bb       	out	0x18, r25	; 24
 134:	68 2f       	mov	r22, r24
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	cb df       	rcall	.-106    	; 0xd0 <nrf24_write_reg>
 13a:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <payload_len>
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	c6 df       	rcall	.-116    	; 0xd0 <nrf24_write_reg>
 144:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <payload_len>
 148:	82 e1       	ldi	r24, 0x12	; 18
 14a:	c2 df       	rcall	.-124    	; 0xd0 <nrf24_write_reg>
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	83 e1       	ldi	r24, 0x13	; 19
 150:	bf df       	rcall	.-130    	; 0xd0 <nrf24_write_reg>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	84 e1       	ldi	r24, 0x14	; 20
 156:	bc df       	rcall	.-136    	; 0xd0 <nrf24_write_reg>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	85 e1       	ldi	r24, 0x15	; 21
 15c:	b9 df       	rcall	.-142    	; 0xd0 <nrf24_write_reg>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	86 e1       	ldi	r24, 0x16	; 22
 162:	b6 df       	rcall	.-148    	; 0xd0 <nrf24_write_reg>
 164:	66 e2       	ldi	r22, 0x26	; 38
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	b3 df       	rcall	.-154    	; 0xd0 <nrf24_write_reg>
 16a:	68 e0       	ldi	r22, 0x08	; 8
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	b0 df       	rcall	.-160    	; 0xd0 <nrf24_write_reg>
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	ad df       	rcall	.-166    	; 0xd0 <nrf24_write_reg>
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	aa df       	rcall	.-172    	; 0xd0 <nrf24_write_reg>
 17c:	6f e4       	ldi	r22, 0x4F	; 79
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	a7 df       	rcall	.-178    	; 0xd0 <nrf24_write_reg>
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	8c e1       	ldi	r24, 0x1C	; 28
 186:	a4 df       	rcall	.-184    	; 0xd0 <nrf24_write_reg>
 188:	b2 df       	rcall	.-156    	; 0xee <nrf24_powerUpRx>
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <nrf24_powerUpTx>:
 18e:	60 e7       	ldi	r22, 0x70	; 112
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	9e df       	rcall	.-196    	; 0xd0 <nrf24_write_reg>
 194:	6a e0       	ldi	r22, 0x0A	; 10
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	9b df       	rcall	.-202    	; 0xd0 <nrf24_write_reg>
 19a:	08 95       	ret

0000019c <nrf24_send>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	88 b3       	in	r24, 0x18	; 24
 1a4:	87 7f       	andi	r24, 0xF7	; 247
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	f2 df       	rcall	.-28     	; 0x18e <nrf24_powerUpTx>
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	59 df       	rcall	.-334    	; 0x66 <SPI_MasterTransmit>
 1b4:	88 b3       	in	r24, 0x18	; 24
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	8f 7e       	andi	r24, 0xEF	; 239
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	80 ea       	ldi	r24, 0xA0	; 160
 1c2:	51 df       	rcall	.-350    	; 0x66 <SPI_MasterTransmit>
 1c4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <payload_len>
 1c8:	ce 01       	movw	r24, r28
 1ca:	6d df       	rcall	.-294    	; 0xa6 <nrf24_transmitSync>
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	80 61       	ori	r24, 0x10	; 16
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	88 b3       	in	r24, 0x18	; 24
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <nrf24_powerDown>:
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	87 7f       	andi	r24, 0xF7	; 247
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	68 e0       	ldi	r22, 0x08	; 8
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	73 df       	rcall	.-282    	; 0xd0 <nrf24_write_reg>
 1ea:	08 95       	ret

000001ec <nrf24_writeRegister>:
/************************************************************/
/*         ЗАПИСЬ НЕСКОЛЬКИХ БАЙТ В ОДИН РЕГИСТР            */
/************************************************************/
/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	eb 01       	movw	r28, r22
 1f4:	14 2f       	mov	r17, r20
	nrf24_csn_low;
 1f6:	98 b3       	in	r25, 0x18	; 24
 1f8:	9f 7e       	andi	r25, 0xEF	; 239
 1fa:	98 bb       	out	0x18, r25	; 24
	SPI_MasterTransmit(W_REGISTER | (REGISTER_MASK & reg));
 1fc:	8f 71       	andi	r24, 0x1F	; 31
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	32 df       	rcall	.-412    	; 0x66 <SPI_MasterTransmit>
	nrf24_transmitSync(value,len);
 202:	61 2f       	mov	r22, r17
 204:	ce 01       	movw	r24, r28
 206:	4f df       	rcall	.-354    	; 0xa6 <nrf24_transmitSync>
	nrf24_csn_high;
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	88 bb       	out	0x18, r24	; 24
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	08 95       	ret

00000216 <nrf24_rx_address>:
/************************************************************/
/*              ЗАПИСЬ АДРЕСА ПРИЕМНИКА                     */
/************************************************************/

void nrf24_rx_address(uint8_t * adr)
{
 216:	bc 01       	movw	r22, r24
	nrf24_ce_low;
 218:	98 b3       	in	r25, 0x18	; 24
 21a:	97 7f       	andi	r25, 0xF7	; 247
 21c:	98 bb       	out	0x18, r25	; 24
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 21e:	45 e0       	ldi	r20, 0x05	; 5
 220:	8b e0       	ldi	r24, 0x0B	; 11
 222:	e4 df       	rcall	.-56     	; 0x1ec <nrf24_writeRegister>
	nrf24_ce_high;
 224:	88 b3       	in	r24, 0x18	; 24
 226:	88 60       	ori	r24, 0x08	; 8
 228:	88 bb       	out	0x18, r24	; 24
 22a:	08 95       	ret

0000022c <nrf24_tx_address>:

/************************************************************/
/*            ЗАПИСЬ АДРЕСА ПЕРЕДАТЧИКА                     */
/************************************************************/
void nrf24_tx_address(uint8_t* adr)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 232:	45 e0       	ldi	r20, 0x05	; 5
 234:	bc 01       	movw	r22, r24
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	d9 df       	rcall	.-78     	; 0x1ec <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 23a:	45 e0       	ldi	r20, 0x05	; 5
 23c:	be 01       	movw	r22, r28
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	d5 df       	rcall	.-86     	; 0x1ec <nrf24_writeRegister>
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <beep>:
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 248:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <data_array>
 24c:	8b 32       	cpi	r24, 0x2B	; 43
 24e:	09 f4       	brne	.+2      	; 0x252 <beep+0xa>
 250:	49 c0       	rjmp	.+146    	; 0x2e4 <beep+0x9c>
 252:	30 f4       	brcc	.+12     	; 0x260 <beep+0x18>
 254:	88 23       	and	r24, r24
 256:	09 f4       	brne	.+2      	; 0x25a <beep+0x12>
 258:	9c c0       	rjmp	.+312    	; 0x392 <beep+0x14a>
 25a:	8a 31       	cpi	r24, 0x1A	; 26
 25c:	e1 f0       	breq	.+56     	; 0x296 <beep+0x4e>
 25e:	08 95       	ret
 260:	8c 33       	cpi	r24, 0x3C	; 60
 262:	09 f4       	brne	.+2      	; 0x266 <beep+0x1e>
 264:	53 c0       	rjmp	.+166    	; 0x30c <beep+0xc4>
 266:	8d 34       	cpi	r24, 0x4D	; 77
 268:	09 f4       	brne	.+2      	; 0x26c <beep+0x24>
 26a:	64 c0       	rjmp	.+200    	; 0x334 <beep+0xec>
 26c:	08 95       	ret
{
	case 0x1A:{    //сигнал включения
		for (i=0;i<50;i++)    //500 Гц 80мс
		{
			beep_on;
 26e:	82 b3       	in	r24, 0x12	; 18
 270:	80 62       	ori	r24, 0x20	; 32
 272:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	e9 ef       	ldi	r30, 0xF9	; 249
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <beep+0x30>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <beep+0x36>
 27e:	00 00       	nop
			_delay_ms(1);
			beep_off;
 280:	82 b3       	in	r24, 0x12	; 18
 282:	8f 7d       	andi	r24, 0xDF	; 223
 284:	82 bb       	out	0x12, r24	; 18
 286:	e9 ef       	ldi	r30, 0xF9	; 249
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <beep+0x42>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <beep+0x48>
 290:	00 00       	nop
{
uint8_t i;
switch (data_array)
{
	case 0x1A:{    //сигнал включения
		for (i=0;i<50;i++)    //500 Гц 80мс
 292:	9f 5f       	subi	r25, 0xFF	; 255
 294:	01 c0       	rjmp	.+2      	; 0x298 <beep+0x50>
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 296:	90 e0       	ldi	r25, 0x00	; 0
{
	case 0x1A:{    //сигнал включения
		for (i=0;i<50;i++)    //500 Гц 80мс
 298:	92 33       	cpi	r25, 0x32	; 50
 29a:	48 f3       	brcs	.-46     	; 0x26e <beep+0x26>
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0f c0       	rjmp	.+30     	; 0x2be <beep+0x76>
			beep_off;
			_delay_ms(1);
		};
		for (i=0;i<100;i++)   //1000 гц 80мс
		{
			beep_on;
 2a0:	82 b3       	in	r24, 0x12	; 18
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	f6 ea       	ldi	r31, 0xA6	; 166
 2a8:	fa 95       	dec	r31
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <beep+0x60>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <beep+0x66>
			_delay_us(500);
			beep_off;
 2ae:	82 b3       	in	r24, 0x12	; 18
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	86 ea       	ldi	r24, 0xA6	; 166
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <beep+0x6e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <beep+0x74>
			beep_on;
			_delay_ms(1);
			beep_off;
			_delay_ms(1);
		};
		for (i=0;i<100;i++)   //1000 гц 80мс
 2bc:	9f 5f       	subi	r25, 0xFF	; 255
 2be:	94 36       	cpi	r25, 0x64	; 100
 2c0:	78 f3       	brcs	.-34     	; 0x2a0 <beep+0x58>
 2c2:	08 95       	ret
		};
	}; break;
	case 0x2B:{
		for (i=0;i<100;i++)   //1000 гц 80мс
		{
			beep_on;
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	82 bb       	out	0x12, r24	; 18
 2ca:	e6 ea       	ldi	r30, 0xA6	; 166
 2cc:	ea 95       	dec	r30
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <beep+0x84>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <beep+0x8a>
			_delay_us(500);
			beep_off;
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	8f 7d       	andi	r24, 0xDF	; 223
 2d6:	82 bb       	out	0x12, r24	; 18
 2d8:	f6 ea       	ldi	r31, 0xA6	; 166
 2da:	fa 95       	dec	r31
 2dc:	f1 f7       	brne	.-4      	; 0x2da <beep+0x92>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <beep+0x98>
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x2B:{
		for (i=0;i<100;i++)   //1000 гц 80мс
 2e0:	9f 5f       	subi	r25, 0xFF	; 255
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <beep+0x9e>
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 2e4:	90 e0       	ldi	r25, 0x00	; 0
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x2B:{
		for (i=0;i<100;i++)   //1000 гц 80мс
 2e6:	94 36       	cpi	r25, 0x64	; 100
 2e8:	68 f3       	brcs	.-38     	; 0x2c4 <beep+0x7c>
 2ea:	08 95       	ret
		};
	}; break;
	case 0x3c:{
		for (i=0;i<100;i++)   //1000 гц 80мс
		{
			beep_on;
 2ec:	82 b3       	in	r24, 0x12	; 18
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	82 bb       	out	0x12, r24	; 18
 2f2:	86 ea       	ldi	r24, 0xA6	; 166
 2f4:	8a 95       	dec	r24
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <beep+0xac>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <beep+0xb2>
			_delay_us(500);
			beep_off;
 2fa:	82 b3       	in	r24, 0x12	; 18
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	82 bb       	out	0x12, r24	; 18
 300:	e6 ea       	ldi	r30, 0xA6	; 166
 302:	ea 95       	dec	r30
 304:	f1 f7       	brne	.-4      	; 0x302 <beep+0xba>
 306:	00 c0       	rjmp	.+0      	; 0x308 <beep+0xc0>
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x3c:{
		for (i=0;i<100;i++)   //1000 гц 80мс
 308:	9f 5f       	subi	r25, 0xFF	; 255
 30a:	01 c0       	rjmp	.+2      	; 0x30e <beep+0xc6>
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 30c:	90 e0       	ldi	r25, 0x00	; 0
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x3c:{
		for (i=0;i<100;i++)   //1000 гц 80мс
 30e:	94 36       	cpi	r25, 0x64	; 100
 310:	68 f3       	brcs	.-38     	; 0x2ec <beep+0xa4>
 312:	08 95       	ret
		};
	}; break;
	case 0x4D:{         //сигнал выключения
		for (i=0;i<100;i++)   //1000 гц 80мс
		{
			beep_on;
 314:	82 b3       	in	r24, 0x12	; 18
 316:	80 62       	ori	r24, 0x20	; 32
 318:	82 bb       	out	0x12, r24	; 18
 31a:	f6 ea       	ldi	r31, 0xA6	; 166
 31c:	fa 95       	dec	r31
 31e:	f1 f7       	brne	.-4      	; 0x31c <beep+0xd4>
 320:	00 c0       	rjmp	.+0      	; 0x322 <beep+0xda>
			_delay_us(500);
			beep_off;
 322:	82 b3       	in	r24, 0x12	; 18
 324:	8f 7d       	andi	r24, 0xDF	; 223
 326:	82 bb       	out	0x12, r24	; 18
 328:	86 ea       	ldi	r24, 0xA6	; 166
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <beep+0xe2>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <beep+0xe8>
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x4D:{         //сигнал выключения
		for (i=0;i<100;i++)   //1000 гц 80мс
 330:	9f 5f       	subi	r25, 0xFF	; 255
 332:	01 c0       	rjmp	.+2      	; 0x336 <beep+0xee>
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 334:	90 e0       	ldi	r25, 0x00	; 0
			beep_off;
			_delay_us(500);
		};
	}; break;
	case 0x4D:{         //сигнал выключения
		for (i=0;i<100;i++)   //1000 гц 80мс
 336:	94 36       	cpi	r25, 0x64	; 100
 338:	68 f3       	brcs	.-38     	; 0x314 <beep+0xcc>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	13 c0       	rjmp	.+38     	; 0x364 <beep+0x11c>
			beep_off;
			_delay_us(500);
		};
		for (i=0;i<50;i++)    //500 Гц 80мс
		{
			beep_on;
 33e:	82 b3       	in	r24, 0x12	; 18
 340:	80 62       	ori	r24, 0x20	; 32
 342:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	e9 ef       	ldi	r30, 0xF9	; 249
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <beep+0x100>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <beep+0x106>
 34e:	00 00       	nop
			_delay_ms(1);
			beep_off;
 350:	82 b3       	in	r24, 0x12	; 18
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	82 bb       	out	0x12, r24	; 18
 356:	e9 ef       	ldi	r30, 0xF9	; 249
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <beep+0x112>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <beep+0x118>
 360:	00 00       	nop
			beep_on;
			_delay_us(500);
			beep_off;
			_delay_us(500);
		};
		for (i=0;i<50;i++)    //500 Гц 80мс
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	92 33       	cpi	r25, 0x32	; 50
 366:	58 f3       	brcs	.-42     	; 0x33e <beep+0xf6>
 368:	08 95       	ret
	}; break;
	
   case 0x00:{              //fail
		for (i=0;i<100;i++)    //500 Гц 80мс  fail звук
		{
			beep_on;
 36a:	82 b3       	in	r24, 0x12	; 18
 36c:	80 62       	ori	r24, 0x20	; 32
 36e:	82 bb       	out	0x12, r24	; 18
 370:	e9 ef       	ldi	r30, 0xF9	; 249
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <beep+0x12c>
 378:	00 c0       	rjmp	.+0      	; 0x37a <beep+0x132>
 37a:	00 00       	nop
			_delay_ms(1);
			beep_off;
 37c:	82 b3       	in	r24, 0x12	; 18
 37e:	8f 7d       	andi	r24, 0xDF	; 223
 380:	82 bb       	out	0x12, r24	; 18
 382:	e9 ef       	ldi	r30, 0xF9	; 249
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <beep+0x13e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <beep+0x144>
 38c:	00 00       	nop
			_delay_ms(1);
		};
	}; break;
	
   case 0x00:{              //fail
		for (i=0;i<100;i++)    //500 Гц 80мс  fail звук
 38e:	9f 5f       	subi	r25, 0xFF	; 255
 390:	01 c0       	rjmp	.+2      	; 0x394 <beep+0x14c>
uint8_t rx_address[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

void beep(void)
{
uint8_t i;
switch (data_array)
 392:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(1);
		};
	}; break;
	
   case 0x00:{              //fail
		for (i=0;i<100;i++)    //500 Гц 80мс  fail звук
 394:	94 36       	cpi	r25, 0x64	; 100
 396:	48 f3       	brcs	.-46     	; 0x36a <beep+0x122>
 398:	08 95       	ret

0000039a <__vector_20>:
	}
   }
}

ISR (PCINT2_vect)   //обработка кнопок
{	
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	2f 93       	push	r18
 3a6:	3f 93       	push	r19
 3a8:	4f 93       	push	r20
 3aa:	5f 93       	push	r21
 3ac:	6f 93       	push	r22
 3ae:	7f 93       	push	r23
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
 3b4:	af 93       	push	r26
 3b6:	bf 93       	push	r27
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <__vector_20+0x26>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <__vector_20+0x2c>
 3c6:	00 00       	nop
	_delay_ms(50);
		
	if(On)              //включение
 3c8:	80 99       	sbic	0x10, 0	; 16
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <__vector_20+0x42>
	{
		data_array=0x1A;
 3cc:	8a e1       	ldi	r24, 0x1A	; 26
 3ce:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data_array>
		while(On){}
 3d2:	80 9b       	sbis	0x10, 0	; 16
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <__vector_20+0x38>
		nrf24_send(&data_array);
 3d6:	8b e6       	ldi	r24, 0x6B	; 107
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	e0 de       	rcall	.-576    	; 0x19c <nrf24_send>
	};
	
	if(Timer)            //Установка времени по 10 минут
 3dc:	81 99       	sbic	0x10, 1	; 16
 3de:	08 c0       	rjmp	.+16     	; 0x3f0 <__vector_20+0x56>
	{
		data_array=0x2B;
 3e0:	8b e2       	ldi	r24, 0x2B	; 43
 3e2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data_array>
		while(Timer){}
 3e6:	81 9b       	sbis	0x10, 1	; 16
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <__vector_20+0x4c>
		nrf24_send(&data_array);
 3ea:	8b e6       	ldi	r24, 0x6B	; 107
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	d6 de       	rcall	.-596    	; 0x19c <nrf24_send>
	};
	
	if(State)            //Запрос состояния
 3f0:	82 99       	sbic	0x10, 2	; 16
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		data_array=0x3C;
 3f4:	8c e3       	ldi	r24, 0x3C	; 60
 3f6:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data_array>
		while(State){}
 3fa:	82 9b       	sbis	0x10, 2	; 16
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <__vector_20+0x60>
		nrf24_send(&data_array);
 3fe:	8b e6       	ldi	r24, 0x6B	; 107
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	cc de       	rcall	.-616    	; 0x19c <nrf24_send>
	};
	
	if(Off)             //Выключение
 404:	84 99       	sbic	0x10, 4	; 16
 406:	08 c0       	rjmp	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		data_array=0x4D;
 408:	8d e4       	ldi	r24, 0x4D	; 77
 40a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <data_array>
		while(Off){}
 40e:	84 9b       	sbis	0x10, 4	; 16
 410:	fe cf       	rjmp	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		nrf24_send(&data_array);		
 412:	8b e6       	ldi	r24, 0x6B	; 107
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	c2 de       	rcall	.-636    	; 0x19c <nrf24_send>
	};
}	
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_11>:
	

ISR(PCINT0_vect)  //обработка прерывания от модуля и обработка сигналов обратной связи
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	static uint8_t repeat;
	uint8_t status;
	
	status = nrf24_lastMessageStatus();
 45c:	19 de       	rcall	.-974    	; 0x90 <nrf24_lastMessageStatus>

	if(status == NRF24_TRANSMISSON_OK)
 45e:	81 11       	cpse	r24, r1
 460:	0a c0       	rjmp	.+20     	; 0x476 <__vector_11+0x3c>
	{
		nrf24_write_reg(STATUS,(1<<TX_DS));
 462:	60 e2       	ldi	r22, 0x20	; 32
 464:	87 e0       	ldi	r24, 0x07	; 7
 466:	34 de       	rcall	.-920    	; 0xd0 <nrf24_write_reg>
		nrf24_powerDown();  //засыпает модуль
 468:	ba de       	rcall	.-652    	; 0x1de <nrf24_powerDown>
		beep();
 46a:	ee de       	rcall	.-548    	; 0x248 <beep>
		data_array=0;
 46c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <data_array>
		repeat=0;            
 470:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 474:	1d c0       	rjmp	.+58     	; 0x4b0 <__vector_11+0x76>
	}
	
	else if(status == NRF24_MESSAGE_LOST)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	d9 f4       	brne	.+54     	; 0x4b0 <__vector_11+0x76>
	{
		if (repeat!=25)
 47a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 47e:	89 31       	cpi	r24, 0x19	; 25
 480:	89 f0       	breq	.+34     	; 0x4a4 <__vector_11+0x6a>
		{
			nrf24_write_reg(STATUS,(1<<MAX_RT));
 482:	60 e1       	ldi	r22, 0x10	; 16
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	24 de       	rcall	.-952    	; 0xd0 <nrf24_write_reg>
			SPI_MasterTransmit(REUSE_TX_PL);     //отправляем пакет снова
 488:	83 ee       	ldi	r24, 0xE3	; 227
 48a:	ed dd       	rcall	.-1062   	; 0x66 <SPI_MasterTransmit>
			nrf24_ce_low;
 48c:	88 b3       	in	r24, 0x18	; 24
 48e:	87 7f       	andi	r24, 0xF7	; 247
 490:	88 bb       	out	0x18, r24	; 24
			nrf24_ce_high;
 492:	88 b3       	in	r24, 0x18	; 24
 494:	88 60       	ori	r24, 0x08	; 8
 496:	88 bb       	out	0x18, r24	; 24
			repeat++;			
 498:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 49c:	8f 5f       	subi	r24, 0xFF	; 255
 49e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__vector_11+0x76>
		}
		else
		{
			nrf24_powerDown();  //засыпает модуль
 4a4:	9c de       	rcall	.-712    	; 0x1de <nrf24_powerDown>
			repeat=0;
 4a6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
			data_array=0;
 4aa:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <data_array>
			beep();
 4ae:	cc de       	rcall	.-616    	; 0x248 <beep>
		};
	}
}	
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <main>:
	
	
int main(void)
{
	CLKPR=(1<<CLKPCE);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	86 bd       	out	0x26, r24	; 38
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (1<<CLKPS1) | (0<<CLKPS0);  //делим частоту на 4
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	86 bd       	out	0x26, r24	; 38
	
	DDRD|=(1<<PB5);		//пин управления звуком на выход
 4da:	81 b3       	in	r24, 0x11	; 17
 4dc:	80 62       	ori	r24, 0x20	; 32
 4de:	81 bb       	out	0x11, r24	; 17
	PORTD|=(1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD6);      //Все пины с подтяжкой для экономии энергии
 4e0:	82 b3       	in	r24, 0x12	; 18
 4e2:	8f 65       	ori	r24, 0x5F	; 95
 4e4:	82 bb       	out	0x12, r24	; 18
	PORTB|=(1<<PB2)|(1<<PB1);	//с подтяжкой для экономии энергии
 4e6:	88 b3       	in	r24, 0x18	; 24
 4e8:	86 60       	ori	r24, 0x06	; 6
 4ea:	88 bb       	out	0x18, r24	; 24
	PORTA=0xff;					//с подтяжкой для экономии энергии
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	8b bb       	out	0x1b, r24	; 27
	
	SPI_MasterInit();
 4f0:	b6 dd       	rcall	.-1172   	; 0x5e <SPI_MasterInit>
	nrf24_init_config(2,1);		//Инициализация и конфигурация. Канал #2 , Полезная нагрузка: 1
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	10 de       	rcall	.-992    	; 0x118 <nrf24_init_config>
	
	/* Загрузка адресов устройст */
	nrf24_tx_address(tx_address);
 4f8:	85 e6       	ldi	r24, 0x65	; 101
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	97 de       	rcall	.-722    	; 0x22c <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 4fe:	80 e6       	ldi	r24, 0x60	; 96
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	89 de       	rcall	.-750    	; 0x216 <nrf24_rx_address>
	    
	GIMSK|=(1<<PCIE2)|(1<<PCIE0);									//разрешение внешних прерываний от кнопок (2) от nrf24 (0)
 504:	8b b7       	in	r24, 0x3b	; 59
 506:	80 63       	ori	r24, 0x30	; 48
 508:	8b bf       	out	0x3b, r24	; 59
	PCMSK2|=(1<<PCINT11)|(1<<PCINT12)|(1<<PCINT13)|(1<<PCINT15);	//разрешаем прерывание на кнопки
 50a:	85 b1       	in	r24, 0x05	; 5
 50c:	87 61       	ori	r24, 0x17	; 23
 50e:	85 b9       	out	0x05, r24	; 5
	PCMSK0|=(1<<PCINT0);											//разрешаем прерывание от модуля
 510:	80 b5       	in	r24, 0x20	; 32
 512:	81 60       	ori	r24, 0x01	; 1
 514:	80 bd       	out	0x20, r24	; 32
		
	PRR|=(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRUSART);  //выключили питание таймеров и usart
 516:	86 b1       	in	r24, 0x06	; 6
 518:	8d 60       	ori	r24, 0x0D	; 13
 51a:	86 b9       	out	0x06, r24	; 6
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN); //если спать - то на полную 
 51c:	85 b7       	in	r24, 0x35	; 53
 51e:	80 65       	ori	r24, 0x50	; 80
 520:	85 bf       	out	0x35, r24	; 53
	
	sei();  //глоб. прерывания
 522:	78 94       	sei
	
	nrf24_powerDown();  //засыпает модуль
 524:	5c de       	rcall	.-840    	; 0x1de <nrf24_powerDown>

while(1)
    {
		sleep_enable();	//теперь приготовимся сами
 526:	85 b7       	in	r24, 0x35	; 53
 528:	80 62       	ori	r24, 0x20	; 32
 52a:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();	//спать!
 52c:	88 95       	sleep
 52e:	fb cf       	rjmp	.-10     	; 0x526 <main+0x54>

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
